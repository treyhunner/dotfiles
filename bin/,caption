#!/usr/bin/env -S uv run --quiet --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "ffmpeg-python==0.2.0",
#     "openai==2.0.0",
# ]
# ///
"""Use whisper to caption the given video file."""
from argparse import ArgumentParser
from os import getenv, fsencode
from pathlib import Path
from tempfile import TemporaryDirectory
import sys

import ffmpeg
from openai import OpenAI


OPENAI_API_KEY_FILE = Path.home() / ".openai"


def generate_captions(video_path, vtt_path):
    """Generate caption file out of audio track."""
    if OPENAI_API_KEY_FILE.is_file():
        api_key = OPENAI_API_KEY_FILE.read_text().strip()
    elif getenv("OPENAI_API_KEY"):
        api_key = None
    else:
        sys.exit(
            f"Error: create {str(OPENAI_API_KEY_FILE)!r} file "
            + "containing Open AI API key."
        )
    client = OpenAI(api_key=api_key)
    with TemporaryDirectory() as directory:
        # Extracting just the audio (for whisper)
        audio_file = Path(directory, video_path.stem + ".ogg")
        (
            ffmpeg
            .input(fsencode(video_path))
            .output(
                fsencode(audio_file),
                vn=None,
                ac=1,
                ar=16000,
                acodec="libopus",
                audio_bitrate="24k",
            )
            .run()
        )
        print(f"Audio file size: {audio_file.stat().st_size/1024**2:,.1f}MB")
        with audio_file.open(mode="rb") as binary_audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=binary_audio_file,
                response_format="vtt",
                language="en",
            )
    vtt_path.write_text(transcript)


def process_video(video_file):
    input_file = video_file
    if not input_file.is_file():
        sys.exit(f"Not a file: {input_file}")
    target_directory = input_file.parent
    with TemporaryDirectory() as directory:
        directory = Path(directory)
        print("Generating captions for", input_file)
        subtitles_file = directory / input_file.with_suffix(".vtt").name
        generate_captions(input_file, subtitles_file)
        final_subtitles_file = target_directory / subtitles_file.name
        subtitles_file.rename(final_subtitles_file)
        print("Wrote", final_subtitles_file)


def main():
    parser = ArgumentParser()
    parser.add_argument("video_file", type=Path)
    args = parser.parse_args()
    process_video(args.video_file)


if __name__ == "__main__":
    main()
